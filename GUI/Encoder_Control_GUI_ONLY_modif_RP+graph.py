# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Encoder_Control_GUI_ONLY_modif_RP.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

# fortement inspiré de: https://www.youtube.com/watch?v=Fk1TBoBcrR4&list=LL7klEEqnwSAUvihtsM3fGtg à plusieurs reprises,
# de https://www.mfitzp.com/tutorials/plotting-matplotlib/
# et de https://programtalk.com/python-examples/PyQt5.QtGui.QDesktopServices.openUrl/
#inspiré de https://stackoverflow.com/questions/60563477/pyqt5-tabwidget-tab-bar-blank-area-background-color

from PyQt5 import QtCore, QtGui, QtWidgets
from lib.Encoder_Control_GUI_ONLY import Ui_Tester
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg
from matplotlib.figure import Figure
import random



class MplCanvas(FigureCanvasQTAgg):

    def __init__(self, parent=None, width=5, height=4, dpi=100):
        fig = Figure(figsize=(width, height), dpi=dpi)
        self.axes = fig.add_subplot(111)
        super(MplCanvas, self).__init__(fig)


class Ui_Style(Ui_Tester):

    def dialogStyle(self):
        style, choix = QtWidgets.QFontDialog.getFont()

        if choix:
            self.tabWidget.setFont(style)
            Tester.setFont(style)

    def styleDefault(self):
        self.tabWidget.setFont(QtGui.QFont("shelldlg2", 8))
        Tester.setFont(QtGui.QFont("shelldlg2", 8))

    def modeSombre(self):
        Tester.setStyleSheet("background-color : rgb(15,15,15); color : white")

        self.tabWidget.setStyleSheet('''
        QTabWidget {background: rgb(0,0,0); border: none;}
        QTabBar::tab {background: rgb(30,30,30);}''')

        self.menuBar.setStyleSheet("background:rgb(0,0,0)")

        self.DirectoryConfirmB.setStyleSheet("background:rgb(30,30,30)")
        self.FileConfirmButton.setStyleSheet("background:rgb(30,30,30)")
        self.DataIntervalButton.setStyleSheet("background:rgb(30,30,30)")
        self.CloseButton.setStyleSheet("background:rgb(30,30,30)")
        self.DisplayPlotButton.setStyleSheet("background:rgb(30,30,30)")
        self.ToConnectButton.setStyleSheet("background:rgb(30,30,30)")
        self.ToDisconnectButton.setStyleSheet("background:rgb(30,30,30)")
        self.ToResetDistance.setStyleSheet("background:rgb(30,30,30)")


    def modeClair(self):
        Tester.setStyleSheet("background-color : rgb(240,240,240); color : black")

        self.tabWidget.setStyleSheet('''
            QTabWidget {background: rgb(255,255,255); border: none;}
            QTabBar::tab {background: rgb(225,225,225);}''')

        self.menuBar.setStyleSheet("background:rgb(255,255,255)")

        self.DirectoryConfirmB.setStyleSheet("background:rgb(225,225,225)")
        self.FileConfirmButton.setStyleSheet("background:rgb(225,225,225)")
        self.DataIntervalButton.setStyleSheet("background:rgb(225,225,225)")
        self.CloseButton.setStyleSheet("background:rgb(225,225,225)")
        self.DisplayPlotButton.setStyleSheet("background:rgb(225,225,225)")
        self.ToConnectButton.setStyleSheet("background:rgb(225,225,225)")
        self.ToDisconnectButton.setStyleSheet("background:rgb(225,225,225)")
        self.ToResetDistance.setStyleSheet("background:rgb(225,225,225)")

    def choixCouleurBackground(self):
        self.colorBackground = QtWidgets.QColorDialog.getColor()
        Tester.setStyleSheet("background-color:{};".format(self.colorBackground.name()))

    def choixCouleurText(self):
        self.colorText = QtWidgets.QColorDialog.getColor()
        Tester.setStyleSheet("color:{};".format(self.colorText.name()))

    def indexPropos(self):
        self.tabWidget.setCurrentIndex(3)

    def openRepo(self):
         QtGui.QDesktopServices.openUrl(QtCore.QUrl("https://github.com/WilliamBonilla62/GUIPythonEncodeur"))

    def afficherGraphique(self):
         self.sc = MplCanvas(self, width=5, height=4, dpi=100)
         self.sc.axes.plot([0, 1, 2, 3, 4, 5, 6, 7], [random.random(),random.random(),random.random(),random.random(),random.random(),random.random(),random.random(),random.random()])
         self.gridLayout_5.addWidget(self.sc, 0, 0, 1, 1)
         self.gridLayout_9.addLayout(self.gridLayout_5, 0, 0, 1, 1)

    def setupUi(self, Tester):
        super().setupUi(Tester)

        self.labelRemerciements = QtWidgets.QLabel("Remerciements:")
        self.verticalLayout_5.addWidget(self.labelRemerciements)

        self.Liste = QtWidgets.QListWidget()
        self.Liste.insertItem(0, "Adrien Pajon")
        self.Liste.insertItem(1, "Raymond-Pierre Bouchard")
        self.Liste.insertItem(2, "William Ricardo Bonilla Villatero")
        self.verticalLayout_5.addWidget(self.Liste)

        self.actionStyle = QtWidgets.QAction(Tester)
        self.actionStyle.setCheckable(False)
        self.actionStyle.setObjectName("actionStyle")
        self.actionStyle.setShortcut("CTRL+M")
        self.actionStyle.setText("Modifier le style")

        self.actionStyleDefault = QtWidgets.QAction(Tester)
        self.actionStyleDefault.setCheckable(False)
        self.actionStyleDefault.setObjectName("actionStyleDefault")
        self.actionStyleDefault.setShortcut("CTRL+D")
        self.actionStyleDefault.setText("Style par défaut")

        self.actionPaletteBackground = QtWidgets.QAction(Tester)
        self.actionPaletteBackground.setCheckable(False)
        self.actionPaletteBackground.setObjectName("actionPaletteBackground")
        self.actionPaletteBackground.setShortcut("CTRL+P")
        self.actionPaletteBackground.setText("Palette de couleurs arrière plan")

        self.actionPaletteText = QtWidgets.QAction(Tester)
        self.actionPaletteText.setCheckable(False)
        self.actionPaletteText.setObjectName("actionPaletteText")
        self.actionPaletteText.setShortcut("CTRL+Q")
        self.actionPaletteText.setText("Palette de couleurs texte")

        self.actionMode_clair.setShortcut("CTRL+C")
        self.actionMode_clair.triggered.connect(self.modeClair)

        self.actionMode_sombre.setShortcut("CTRL+S")
        self.actionMode_sombre.triggered.connect(self.modeSombre)

        self.actionFR.setIcon(QtGui.QIcon('lib/images/drapeauFrance.png'))
        self.actionFR.setShortcut("CTRL+F")

        self.actionENG.setIcon(QtGui.QIcon('lib/images/drapeauGB.jpg'))
        self.actionENG.setShortcut("CTRL+E")

        self.menuCouleur.addAction(self.actionMode_clair)
        self.menuCouleur.addAction(self.actionMode_sombre)

        self.menuFont = QtWidgets.QMenu(self.menuAffichage)
        self.menuFont.setObjectName("menuFont")
        self.menuAffichage.addMenu(self.menuFont)
        self.menuFont.addAction(self.actionStyle)
        self.menuFont.addAction(self.actionStyleDefault)
        self.menuFont.setTitle("Modifier le style")

        self.menuCouleur.addAction(self.actionPaletteBackground)
        self.menuCouleur.addAction(self.actionPaletteText)

        self.menuAffichage.addAction(self.menuCouleur.menuAction())
        self.menuAffichage.addSeparator()
        self.menuAffichage.addAction(self.menuLanguage_2.menuAction())
        self.menuBar.addAction(self.menuAffichage.menuAction())
        self.menuBar.addAction(self.menuAide.menuAction())

        self.retranslateUi2(Tester)
        self.tabWidget.setCurrentIndex(3)
        QtCore.QMetaObject.connectSlotsByName(Tester)

        self.actionStyle.triggered.connect(self.dialogStyle)
        self.actionStyleDefault.triggered.connect(self.styleDefault)
        self.action_propos.triggered.connect(self.indexPropos)
        self.actionRepo.triggered.connect(self.openRepo)
        self.DisplayPlotButton.clicked.connect(self.afficherGraphique)
        self.actionPaletteBackground.triggered.connect(self.choixCouleurBackground)
        self.actionPaletteText.triggered.connect(self.choixCouleurText)



    def retranslateUi2(self, Tester):
        super().retranslateUi(Tester)
        _translate = QtCore.QCoreApplication.translate

        self.labelRemerciements.setText(_translate("Tester", "Remerciements:"))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    Tester = QtWidgets.QMainWindow()
    ui = Ui_Style()
    ui.setupUi(Tester)
    Tester.show()
    sys.exit(app.exec_())
